---
# tasks file for license
- name: Render printnanny-license.service from template and backout if validation fails
  block:
    - name: do the actual update, works with copy, lineinfile and any action that allows for `backup`.
      ansible.builtin.template:
        mode: 0664
        src: license.service.j2
        dest: /etc/systemd/system/printnanny-license.service
        force: true
        backup: true
      register: updated
    - name: Run validation. We assume it returns an error when not passing, use `failed_when` if otherwise.
      become: true
      ansible.builtin.command: systemd-analyze verify {{ updated['dest'] }}

  rescue:
    - name: Restore backup file to original
      ansible.builtin.copy:
        remote_src: true
        dest: /etc/systemd/system/printnanny-license.service
        src: "{{ updated['backup_file'] }}"
        mode: 0664
  always:
    - name: We choose to always delete backup, but could copy or move, or only delete in rescue.
      ansible.builtin.file:
        path: "{{ updated['backup_file'] }}"
        state: absent
  notify:
    - systemctl daemon-reload
# - name: Render printnanny-license.service from template
#   become: true
#   ansible.builtin.template:
#     mode: 0664
#     src: license.service.j2
#     dest: /etc/systemd/system/printnanny-license.service
#     force: true
#     backup: true
#     validate: systemd-analyze verify %s
#   notify:
#     - systemctl daemon-reload
- name: Create '{{ printnanny_data_dir }}'
  ansible.builtin.file:
    path: '{{ printnanny_data_dir }}'
    state: directory
    mode: 0770

- name: Create '{{ printnanny_backups_dir }}'
  ansible.builtin.file:
    path: '{{ printnanny_backups_dir }}'
    state: directory
    mode: 0770

- name: Enable printnanny-license.service unit
  become: true
  ansible.builtin.systemd:
    name: printnanny-license
    enabled: true
    state: started
