# TODO send certificate to remote for signing after user authenticates
- name: Create '{{ printnanny_keys_dir }}'
  become: true
  ansible.builtin.file:
    path: '{{ printnanny_keys_dir }}'
    state: directory
    mode: 0750
    group: '{{ printnanny_user }}'
    owner: '{{ printnanny_user }}'
  tags:
    - metadata
- name: Create provisional private key
  become: true
  community.crypto.openssl_privatekey:
    group: '{{ printnanny_user }}'
    owner: '{{ printnanny_user }}'
    path: '{{ printnanny_ec_private_key }}'
    regenerate: 'full_idempotence'
    type: ECC
    # prime256v1
    curve: secp256r1
    format: pkcs8
  tags:
    - secret
    - metadata

- name: Extract provisional public key
  become: true
  community.crypto.openssl_publickey:
    group: '{{ printnanny_user }}'
    owner: '{{ printnanny_user }}'
    privatekey_path: '{{ printnanny_ec_private_key }}'
    path: '{{ printnanny_ec_public_key }}'
  tags:
    - secret
    - metadata
  register: printnanny_ec_public_key_output


- name: Create '{{ printnanny_cacerts_dir }}'
  become: true
  ansible.builtin.file:
    path: '{{ printnanny_cacerts }}'
    state: directory
    mode: 0775
    group: '{{ printnanny_user }}'
    owner: '{{ printnanny_user }}'
  tags:
    - metadata
- name: Download GCP LTS CA Certificate {{ gcp_lts_ca_primary }}
  become: true
  ansible.builtin.get_url:
    url: '{{ gcp_lts_ca_primary }}'
    dest: '{{ printnanny_cacerts }}/{{ gcp_lts_ca_primary | basename }}'
    mode: 0771
    group: '{{ printnanny_user }}'
    owner: '{{ printnanny_user }}'
  tags:
    - metadata

- name: Download GCP LTS CA Certificate {{ gcp_lts_ca_backup }}
  become: true
  ansible.builtin.get_url:
    url: '{{ gcp_lts_ca_backup }}'
    dest: '{{ printnanny_cacerts }}/{{ gcp_lts_ca_backup | basename }}'
    mode: 0771
    group: '{{ printnanny_user }}'
    owner: '{{ printnanny_user }}'
  tags:
    - metadata
